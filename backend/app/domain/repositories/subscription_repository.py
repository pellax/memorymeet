# ================================================================================================
# üìù SUBSCRIPTION REPOSITORY INTERFACE - CLEAN ARCHITECTURE (DIP)
# ================================================================================================
# Interface/Port para el repositorio de suscripciones
# Principio DIP: El dominio define la interface, la infraestructura la implementa

from abc import ABC, abstractmethod
from typing import Optional
from ..entities.subscription import Subscription


class SubscriptionRepository(ABC):
    """
    üèóÔ∏è REPOSITORY INTERFACE - Port para acceso a datos de suscripciones.
    
    Esta interface define el contrato que debe cumplir cualquier implementaci√≥n
    de persistencia para suscripciones, siguiendo el principio DIP (Dependency 
    Inversion Principle).
    
    El DOMINIO define la interface, la INFRAESTRUCTURA la implementa.
    
    Principios aplicados:
    - Dependency Inversion Principle (DIP)
    - Interface Segregation Principle (ISP)
    - Single Responsibility Principle (SRP)
    """
    
    @abstractmethod
    async def get_active_subscription_by_user_id(self, user_id: str) -> Optional[Subscription]:
        """
        üîç Obtener suscripci√≥n activa de un usuario.
        
        Esta es la operaci√≥n M√ÅS CR√çTICA para RF8.0 (Control de Consumo).
        
        Args:
            user_id: Identificador del usuario
            
        Returns:
            Optional[Subscription]: Suscripci√≥n activa del usuario o None
            
        Raises:
            RepositoryException: Si hay error en el acceso a datos
        """
        pass
    
    @abstractmethod
    async def get_subscription_by_id(self, subscription_id: str) -> Optional[Subscription]:
        """
        üîç Obtener suscripci√≥n por ID.
        
        Args:
            subscription_id: Identificador de la suscripci√≥n
            
        Returns:
            Optional[Subscription]: Suscripci√≥n encontrada o None
            
        Raises:
            RepositoryException: Si hay error en el acceso a datos
        """
        pass
    
    @abstractmethod
    async def update_subscription(self, subscription: Subscription) -> Subscription:
        """
        üíæ Actualizar suscripci√≥n existente.
        
        IMPORTANTE: Esta operaci√≥n debe ser AT√ìMICA y mantener consistencia ACID.
        
        Args:
            subscription: Suscripci√≥n con datos actualizados
            
        Returns:
            Subscription: Suscripci√≥n actualizada con timestamps
            
        Raises:
            RepositoryException: Si hay error en la actualizaci√≥n
            OptimisticLockException: Si hay conflicto de concurrencia
        """
        pass
    
    @abstractmethod
    async def create_subscription(self, subscription: Subscription) -> Subscription:
        """
        ‚ûï Crear nueva suscripci√≥n.
        
        Args:
            subscription: Nueva suscripci√≥n a crear
            
        Returns:
            Subscription: Suscripci√≥n creada con ID asignado
            
        Raises:
            RepositoryException: Si hay error en la creaci√≥n
            DuplicateSubscriptionException: Si ya existe suscripci√≥n activa
        """
        pass
    
    @abstractmethod
    async def begin_transaction(self):
        """
        üîÑ Iniciar transacci√≥n ACID.
        
        Para operaciones cr√≠ticas de consumo que requieren atomicidad.
        
        Returns:
            Transaction context manager
        """
        pass
    
    @abstractmethod
    async def commit_transaction(self):
        """
        ‚úÖ Confirmar transacci√≥n ACID.
        
        Raises:
            TransactionException: Si hay error en el commit
        """
        pass
    
    @abstractmethod
    async def rollback_transaction(self):
        """
        üîÑ Revertir transacci√≥n ACID.
        
        Raises:
            TransactionException: Si hay error en el rollback
        """
        pass


class UserRepository(ABC):
    """
    üë§ REPOSITORY INTERFACE - Port para acceso a datos de usuarios.
    
    Interface segregada espec√≠ficamente para operaciones de usuarios,
    siguiendo ISP (Interface Segregation Principle).
    """
    
    @abstractmethod
    async def get_user_by_id(self, user_id: str) -> Optional['User']:
        """
        üîç Obtener usuario por ID.
        
        Args:
            user_id: Identificador del usuario
            
        Returns:
            Optional[User]: Usuario encontrado o None
        """
        pass
    
    @abstractmethod
    async def user_exists(self, user_id: str) -> bool:
        """
        ‚úÖ Verificar si un usuario existe.
        
        Operaci√≥n optimizada para validaciones r√°pidas.
        
        Args:
            user_id: Identificador del usuario
            
        Returns:
            bool: True si el usuario existe
        """
        pass