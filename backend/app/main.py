# ================================================================================================
# üöÄ MAIN FASTAPI APPLICATION - Servicio de Suscripciones/Consumo (Gatekeeper)
# ================================================================================================
# Aplicaci√≥n principal que expone los endpoints cr√≠ticos del sistema SaaS

from fastapi import FastAPI, Request, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.exceptions import RequestValidationError
from contextlib import asynccontextmanager
import logging
import time
from typing import Dict, Any

from .api.v1.consumption_router import router as consumption_router
from .domain.exceptions.consumption_exceptions import DomainException

# ================================================================================================
# üîß APPLICATION CONFIGURATION
# ================================================================================================

# Configuraci√≥n de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    ‚úÖ Gesti√≥n del ciclo de vida de la aplicaci√≥n.
    
    Aqu√≠ se inicializan y limpian recursos como conexiones de BD,
    pools de conexiones, etc.
    """
    # Startup
    logger.info("üöÄ Starting Consumption Service (Gatekeeper)")
    logger.info("üí∞ RF8.0 Critical Service - SaaS Monetization Layer")
    
    # TODO: Inicializar conexiones de BD, Redis, etc.
    # await database.connect()
    # await redis.connect()
    
    yield
    
    # Shutdown
    logger.info("üîª Shutting down Consumption Service")
    # TODO: Cerrar conexiones
    # await database.disconnect()
    # await redis.disconnect()


# ================================================================================================
# üèóÔ∏è FASTAPI APPLICATION SETUP
# ================================================================================================

app = FastAPI(
    title="üí∞ Consumption Service - SaaS Gatekeeper",
    description="""
    ## üîí Servicio Cr√≠tico de Control de Consumo (RF8.0)
    
    **EL GATEKEEPER DEL SISTEMA SAAS**
    
    Este servicio implementa la l√≥gica de monetizaci√≥n m√°s cr√≠tica del sistema M2PRD-001.
    Controla el acceso al procesamiento de reuniones basado en el consumo de horas 
    de los usuarios.
    
    ### üéØ Funcionalidades Principales:
    
    - **üö¶ Verificaci√≥n de Consumo**: Autoriza o rechaza el procesamiento
    - **üìä Actualizaci√≥n Post-Proceso**: Actualiza el consumo real
    - **üìà Consulta de Estado**: Informaci√≥n del consumo del usuario
    
    ### üèóÔ∏è Arquitectura:
    
    - **Clean Architecture**: Separaci√≥n clara de capas
    - **TDD**: Desarrollo guiado por tests
    - **SOLID Principles**: Principios de dise√±o aplicados
    - **ACID Transactions**: Consistencia de datos financieros
    
    ### üîó Integraci√≥n:
    
    - **Workflow (n8n/Make)**: Recibe autorizaciones de este servicio
    - **Frontend SaaS**: Consulta estado de consumo
    - **PostgreSQL**: Persistencia ACID de datos cr√≠ticos
    """,
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan
)

# ================================================================================================
# üåê MIDDLEWARE CONFIGURATION
# ================================================================================================

# CORS - Configuraci√≥n para frontend SaaS
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",  # React frontend local
        "https://app.memorymeet.com",  # Producci√≥n frontend
        "https://n8n.company.com",  # n8n workflows
    ],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)

# Middleware para logging de requests
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """
    ‚úÖ Middleware para logging estructurado de requests.
    
    Cr√≠tico para observabilidad del Gatekeeper.
    """
    start_time = time.time()
    
    # Log de request entrante
    logger.info(
        f"üîÑ Request: {request.method} {request.url.path}",
        extra={
            "method": request.method,
            "path": request.url.path,
            "query_params": str(request.query_params),
            "client_ip": request.client.host
        }
    )
    
    # Procesar request
    response = await call_next(request)
    
    # Calcular tiempo de procesamiento
    process_time = time.time() - start_time
    
    # Log de response
    logger.info(
        f"‚úÖ Response: {response.status_code} ({process_time:.3f}s)",
        extra={
            "status_code": response.status_code,
            "process_time_seconds": process_time,
            "path": request.url.path
        }
    )
    
    # Agregar header de tiempo de procesamiento
    response.headers["X-Process-Time"] = str(process_time)
    
    return response

# ================================================================================================
# üö® EXCEPTION HANDLERS
# ================================================================================================

@app.exception_handler(DomainException)
async def domain_exception_handler(request: Request, exc: DomainException):
    """
    ‚úÖ Handler para excepciones de dominio.
    
    Maneja todas las excepciones de reglas de negocio de forma consistente.
    """
    logger.warning(
        f"üö® Domain Exception: {exc.error_code} - {exc.message}",
        extra={
            "error_code": exc.error_code,
            "message": exc.message,
            "path": request.url.path
        }
    )
    
    # Mapeo de c√≥digos de error a status HTTP
    status_mapping = {
        "INSUFFICIENT_HOURS": status.HTTP_403_FORBIDDEN,
        "USER_NOT_FOUND": status.HTTP_404_NOT_FOUND,
        "SUBSCRIPTION_NOT_FOUND": status.HTTP_404_NOT_FOUND,
        "SUBSCRIPTION_SUSPENDED": status.HTTP_403_FORBIDDEN,
        "SUBSCRIPTION_EXPIRED": status.HTTP_403_FORBIDDEN,
        "INVALID_CONSUMPTION": status.HTTP_400_BAD_REQUEST,
        "DATABASE_TRANSACTION_FAILED": status.HTTP_500_INTERNAL_SERVER_ERROR
    }
    
    return JSONResponse(
        status_code=status_mapping.get(exc.error_code, status.HTTP_400_BAD_REQUEST),
        content={
            "error": exc.error_code,
            "message": exc.message,
            "timestamp": time.time()
        }
    )


@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    """
    ‚úÖ Handler para errores de validaci√≥n de Pydantic.
    """
    logger.warning(
        f"‚ùå Validation Error: {request.url.path}",
        extra={
            "path": request.url.path,
            "errors": exc.errors()
        }
    )
    
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content={
            "error": "VALIDATION_ERROR",
            "message": "Invalid request data",
            "details": exc.errors(),
            "timestamp": time.time()
        }
    )


@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """
    ‚úÖ Handler general para errores no capturados.
    
    CR√çTICO: Los errores en el Gatekeeper deben ser monitoreados.
    """
    logger.error(
        f"üí• Unexpected Error: {str(exc)}",
        extra={
            "path": request.url.path,
            "error_type": type(exc).__name__,
            "error_message": str(exc)
        },
        exc_info=True
    )
    
    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content={
            "error": "INTERNAL_SERVER_ERROR",
            "message": "An unexpected error occurred",
            "timestamp": time.time()
        }
    )

# ================================================================================================
# üõ£Ô∏è ROUTER MOUNTING
# ================================================================================================

# Montar router de consumo (Gatekeeper)
app.include_router(
    consumption_router,
    tags=["üîí Gatekeeper - RF8.0"]
)

# ================================================================================================
# üè• HEALTH CHECK ENDPOINTS
# ================================================================================================

@app.get(
    "/health", 
    tags=["Health Check"],
    summary="üè• Health check del servicio",
    response_model=Dict[str, Any]
)
async def health_check():
    """
    ‚úÖ Endpoint de health check para monitoreo.
    
    Verifica que el servicio est√© funcionando correctamente.
    """
    return {
        "status": "healthy",
        "service": "consumption-service",
        "version": "1.0.0",
        "timestamp": time.time(),
        "checks": {
            "api": "ok",
            # TODO: Agregar checks de BD, Redis, etc.
            # "database": await check_database(),
            # "redis": await check_redis()
        }
    }


@app.get(
    "/",
    tags=["Info"],
    summary="üìã Informaci√≥n del servicio"
)
async def root():
    """
    ‚úÖ Endpoint de informaci√≥n b√°sica.
    """
    return {
        "service": "üí∞ Consumption Service - SaaS Gatekeeper",
        "description": "Critical RF8.0 service for consumption control",
        "version": "1.0.0",
        "docs_url": "/docs",
        "health_url": "/health",
        "endpoints": {
            "start_processing": "/api/v1/consumption/process/start",
            "update_consumption": "/api/v1/consumption/process/update",
            "user_status": "/api/v1/consumption/user/{user_id}/status"
        }
    }

# ================================================================================================
# üöÄ APPLICATION ENTRY POINT
# ================================================================================================

if __name__ == "__main__":
    import uvicorn
    
    logger.info("üöÄ Starting Consumption Service in development mode")
    
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8002,
        reload=True,  # Solo en desarrollo
        log_level="info"
    )